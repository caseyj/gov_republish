defmodule BotflowTest do
  import Mock
  use ExUnit.Case
  use GovRepublish.RepoCase

  def rss_data() do
    """
    <rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
    <channel>
      <atom:link href="https://nitter.privacydev.net/JCParking/rss" rel="self" type="application/rss+xml" />
      <title>JCParking / @JCParking</title>
      <link>https://nitter.privacydev.net/JCParking</link>
      <description>Twitter feed for: @JCParking. Generated by nitter.privacydev.net</description>
      <language>en-us</language>
      <ttl>40</ttl>
      <image>
        <title>JCParking / @JCParking</title>
        <link>https://nitter.privacydev.net/JCParking</link>
        <url>https://nitter.privacydev.net/pic/pbs.twimg.com%2Fprofile_images%2F672096120659697664%2FvYDLqbNd_400x400.jpg</url>
        <width>128</width>
        <height>128</height>
      </image>
        <item>
          <title>Alternate side of the street parking (street sweeping) is suspended Tuesday and Wednesday, February 11-12, 2025. Enforcement regulations will resume the next day.</title>
          <dc:creator>@JCParking</dc:creator>
          <description><![CDATA[<p>Alternate side of the street parking (street sweeping) is suspended Tuesday and Wednesday, February 11-12, 2025. Enforcement regulations will resume the next day.</p>
          <img src="https://nitter.privacydev.net/pic/media%2FGjgVNu8XIAA6Uto.jpg" style="max-width:250px;" />]]></description>
          <pubDate>Tue, 11 Feb 2024 12:00:31 GMT</pubDate>
          <guid>https://nitter.privacydev.net/JCParking/status/1889283372192514151#m</guid>
          <link>https://nitter.privacydev.net/JCParking/status/1889283372192514151#m</link>
        </item>
        <item>
        <title>Alternate side of the street parking / street sweeping is postponed today, Monday, February 10, 2025. Normal enforcement continues the following day.</title>
        <dc:creator>@JCParking</dc:creator>
        <description><![CDATA[<p>Alternate side of the street parking / street sweeping is postponed today, Monday, February 10, 2025. Normal enforcement continues the following day.</p>
        <img src="https://nitter.privacydev.net/pic/media%2FGjbLmsPXoAAMbmt.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Mon, 10 Feb 2025 12:00:26 GMT</pubDate>
        <guid>https://nitter.privacydev.net/JCParking/status/1888920962810195985#m</guid>
        <link>https://nitter.privacydev.net/JCParking/status/1888920962810195985#m</link>
      </item>
      </channel>
      </rss>
    """
  end

  test "Show get_most_recent_posts show posts are in order" do
    RssClient.add_records_to_db(rss_data())
    posts = List.to_tuple(Botflow.get_most_recent_posts("@JCParking"))
    assert elem(posts, 0).post_id == "JCParking_1889283372192514151"
    assert elem(posts, 1).post_id == "JCParking_1888920962810195985"
  end

  test "Show that only records that have not been uploaded are selected" do
    RssClient.add_records_to_db(rss_data())
    assert Enum.count(Botflow.get_most_recent_posts("@JCParking")) == 2
    post = GovRepublish.RssPost |> GovRepublish.Repo.get(1)
    SqliteClient.update_record(post, %{:posted => true})
    posts = Botflow.get_most_recent_posts("@JCParking")
    assert Enum.count(posts) == 1
  end

  test "Show that update_successful_message inserts and links properly" do
    RssClient.add_records_to_db(rss_data())
    post = GovRepublish.RssPost |> GovRepublish.Repo.get(1)

    input =
      {post,
       "{\"uri\":\"at://did:plc:u5cwb2mwiv2bfq53cjufe6yn/app.bsky.feed.post/3k4duaz5vfs2b\",\"cid\":\"bafyreibjifzpqj6o6wcq3hejh7y4z4z2vmiklkvykc57tw3pcbx3kxifpm\"}"}

    Botflow.update_successful_message_parse(input)
    created_records = GovRepublish.CreatedBskyRecord |> GovRepublish.Repo.all()
    assert Enum.count(created_records) == 1
    assert post.id == hd(created_records).rss_post_id
  end

  test "Show push_unpublished_messages goes through steps" do
    with_mock AtProto.IdentityResolution,
      login_flow: fn _a, _b -> {:ok, %{}} end do
      with_mock BlueskyClient,
        post: fn _c, _d ->
          {:ok,
           %HTTPoison.Response{
             status_code: 200,
             body:
               "{\"uri\":\"at://did:plc:u5cwb2mwiv2bfq53cjufe6yn/app.bsky.feed.post/3k4duaz5vfs2b\",\"cid\":\"bafyreibjifzpqj6o6wcq3hejh7y4z4z2vmiklkvykc57tw3pcbx3kxifpm\"}"
           }}
        end,
        produce_post: fn _e -> {} end do
        RssClient.add_records_to_db(rss_data())
        {:ok, posts} = Botflow.push_unpublished_messages("@JCParking", "a", "b")
        bsky_posts = GovRepublish.CreatedBskyRecord |> GovRepublish.Repo.all()
        assert Enum.count(posts) == 2
        assert Enum.count(bsky_posts) == 2
      end
    end
  end
end
